const { Scenes } = require('telegraf');

const modeScene = new Scenes.BaseScene('mode');

const modes = {
	standard: {
		name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
		emoji: '‚ö°Ô∏è',
		description: '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞',
	},
	quiet: {
		name: '–¢–∏—Ö–∏–π',
		emoji: 'ÔøΩÔøΩ',
		description: '–ú–∏–Ω–∏–º—É–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
	},
	verbose: {
		name: '–ü–æ–¥—Ä–æ–±–Ω—ã–π',
		emoji: 'üìù',
		description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã',
	},
};

modeScene.enter(async (ctx) => {
	const currentMode = ctx.session.mode || 'standard';

	await ctx.reply(
		'‚ö°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n\n' +
			Object.entries(modes)
				.map(
					([key, mode]) =>
						`${currentMode === key ? '‚úÖ' : '‚ö™Ô∏è'} ${mode.emoji} ${mode.name}\n${
							mode.description
						}`
				)
				.join('\n\n'),
		{
			reply_markup: {
				inline_keyboard: [
					[
						{ text: '‚ö°Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', callback_data: 'mode_standard' },
						{ text: 'ü§´ –¢–∏—Ö–∏–π', callback_data: 'mode_quiet' },
					],
					[{ text: 'üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π', callback_data: 'mode_verbose' }],
					[{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
				],
			},
		}
	);
});

modeScene.on('callback_query', async (ctx) => {
	const action = ctx.callbackQuery.data;

	try {
		await ctx.answerCbQuery();

		if (action.startsWith('mode_')) {
			const mode = action.split('_')[1];
			ctx.session.mode = mode;

			// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			await ctx.deleteMessage();

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
			await ctx.reply(
				`‚úÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${modes[mode].emoji} ${modes[mode].name}\n\n` +
					`${modes[mode].description}\n\n` +
					'–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
						],
					},
				}
			);

			await ctx.scene.leave();
		} else if (action === 'settings') {
			await ctx.scene.leave();
			await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'notifications' }],
						[{ text: 'üåç –Ø–∑—ã–∫', callback_data: 'language' }],
						[{ text: '‚ö°Ô∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', callback_data: 'mode' }],
					],
				},
			});
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
		await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
	}
});

module.exports = modeScene;
