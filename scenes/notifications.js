const { Scenes } = require('telegraf');

const notificationsScene = new Scenes.BaseScene('notifications');

const notificationTypes = {
	daily: {
		name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
		emoji: 'üìÖ',
		description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
	},
	weekly: {
		name: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
		emoji: 'üìä',
		description: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
	},
	monthly: {
		name: '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
		emoji: 'üìà',
		description: '–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
	},
};

notificationsScene.enter(async (ctx) => {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
	if (!ctx.session.notifications) {
		ctx.session.notifications = {
			daily: true,
			weekly: true,
			monthly: false,
		};
	}

	await ctx.reply(
		'üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n' +
			'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n' +
			Object.entries(notificationTypes)
				.map(
					([key, type]) =>
						`${ctx.session.notifications[key] ? '‚úÖ' : '‚ùå'} ${type.emoji} ${
							type.name
						}\n${type.description}`
				)
				.join('\n\n'),
		{
			reply_markup: {
				inline_keyboard: [
					[
						{ text: 'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ', callback_data: 'notify_daily' },
						{ text: 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ', callback_data: 'notify_weekly' },
					],
					[{ text: 'üìà –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ', callback_data: 'notify_monthly' }],
					[{ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏', callback_data: 'notify_save' }],
					[{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
				],
			},
		}
	);
});

notificationsScene.on('callback_query', async (ctx) => {
	const action = ctx.callbackQuery.data;

	try {
		await ctx.answerCbQuery();

		if (action.startsWith('notify_')) {
			const type = action.split('_')[1];

			if (type === 'save') {
				// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				await ctx.deleteMessage();

				// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
				const activeNotifications = Object.entries(ctx.session.notifications || {})
					.filter(([_, enabled]) => enabled)
					.map(
						([key]) => `${notificationTypes[key].emoji} ${notificationTypes[key].name}`
					)
					.join('\n');

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
				await ctx.reply(
					'‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n' +
						'–ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n' +
						(activeNotifications || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π') +
						'\n\n' +
						'–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
					{
						reply_markup: {
							inline_keyboard: [
								[{ text: '‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
							],
						},
					}
				);

				await ctx.scene.leave();
				return;
			}

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
			if (!ctx.session.notifications) {
				ctx.session.notifications = {
					daily: true,
					weekly: true,
					monthly: false,
				};
			}

			// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
			ctx.session.notifications[type] = !ctx.session.notifications[type];

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
			await ctx.editMessageText(
				'üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n' +
					'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n' +
					Object.entries(notificationTypes)
						.map(
							([key, type]) =>
								`${ctx.session.notifications[key] ? '‚úÖ' : '‚ùå'} ${type.emoji} ${
									type.name
								}\n${type.description}`
						)
						.join('\n\n'),
				{
					reply_markup: {
						inline_keyboard: [
							[
								{ text: 'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ', callback_data: 'notify_daily' },
								{ text: 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ', callback_data: 'notify_weekly' },
							],
							[{ text: 'üìà –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ', callback_data: 'notify_monthly' }],
							[{ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏', callback_data: 'notify_save' }],
							[{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
						],
					},
				}
			);
		} else if (action === 'settings') {
			await ctx.scene.leave();
			await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'notifications' }],
						[{ text: 'üåç –Ø–∑—ã–∫', callback_data: 'language' }],
						[{ text: '‚ö°Ô∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', callback_data: 'mode' }],
					],
				},
			});
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
		await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
	}
});

module.exports = notificationsScene;
