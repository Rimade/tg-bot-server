const { Scenes } = require('telegraf');

const helpScene = new Scenes.BaseScene('help');

const helpCategories = {
	quiz: {
		title: 'üìö –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤',
		content: [
			'‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã',
			'‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
			'‚Ä¢ –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–æ–ø—Ä–æ—Å',
			'‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π',
			'‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ',
		],
	},
	bot: {
		title: 'ü§ñ –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞',
		content: [
			'‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã',
			'‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —è–∑—ã–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
			'‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
			'‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã',
			'‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
		],
	},
	faq: {
		title: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
		content: [
			'Q: –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?\nA: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"',
			'Q: –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫?\nA: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫',
			'Q: –ö–∞–∫ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\nA: –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è',
			'Q: –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?\nA: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"',
			'Q: –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?\nA: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support',
		],
	},
};

helpScene.enter(async (ctx) => {
	await ctx.reply('üìö –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n\n' + '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
		reply_markup: {
			inline_keyboard: [
				[
					{ text: 'üìö –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤', callback_data: 'help_quiz' },
					{ text: 'ü§ñ –°–æ–≤–µ—Ç—ã –ø–æ –±–æ—Ç—É', callback_data: 'help_bot' },
				],
				[{ text: '‚ùì FAQ', callback_data: 'help_faq' }],
			],
		},
	});
});

helpScene.on('callback_query', async (ctx) => {
	const action = ctx.callbackQuery.data;

	try {
		await ctx.answerCbQuery();

		if (action.startsWith('help_')) {
			const category = action.split('_')[1];
			const helpData = helpCategories[category];

			if (helpData) {
				await ctx.reply(`${helpData.title}\n\n` + helpData.content.join('\n\n'), {
					reply_markup: {
						inline_keyboard: [
							[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'help_back' }],
						],
					},
				});
			}
		} else if (action === 'help_back') {
			await ctx.deleteMessage();
			await ctx.reply('üìö –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n\n' + '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'üìö –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤', callback_data: 'help_quiz' },
							{ text: 'ü§ñ –°–æ–≤–µ—Ç—ã –ø–æ –±–æ—Ç—É', callback_data: 'help_bot' },
						],
						[{ text: '‚ùì FAQ', callback_data: 'help_faq' }],
					],
				},
			});
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
		await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
	}
});

module.exports = helpScene;
