const { Scenes } = require('telegraf');

const formScene = new Scenes.BaseScene('form');

formScene.enter(async (ctx) => {
	await ctx.reply('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:\n\n' + '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
});

formScene.on('text', async (ctx) => {
	if (!ctx.scene.state.name) {
		ctx.scene.state.name = ctx.message.text;
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:');
	} else if (!ctx.scene.state.age) {
		ctx.scene.state.age = ctx.message.text;
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
	} else if (!ctx.scene.state.email) {
		ctx.scene.state.email = ctx.message.text;

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		await ctx.reply(
			'‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n' +
				`–ò–º—è: ${ctx.scene.state.name}\n` +
				`–í–æ–∑—Ä–∞—Å—Ç: ${ctx.scene.state.age}\n` +
				`Email: ${ctx.scene.state.email}`,
			{
				reply_markup: {
					inline_keyboard: [[{ text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑', callback_data: 'form' }]],
				},
			}
		);

		await ctx.scene.leave();
	}
});

module.exports = formScene;
