const { Scenes } = require('telegraf');

const quizScene = new Scenes.BaseScene('quiz');

const questions = [
	{
		question: '–ß—Ç–æ —Ç–∞–∫–æ–µ JavaScript?',
		options: [
			'–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
			'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
			'–§—Ä–µ–π–º–≤–æ—Ä–∫',
			'–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
		],
		correct: 0,
	},
	{
		question: '–ß—Ç–æ —Ç–∞–∫–æ–µ React?',
		options: [
			'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
			'JavaScript –±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
			'–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
			'–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
		],
		correct: 1,
	},
];

quizScene.enter(async (ctx) => {
	ctx.scene.state.currentQuestion = 0;
	ctx.scene.state.score = 0;
	await showQuestion(ctx);
});

async function showQuestion(ctx) {
	const question = questions[ctx.scene.state.currentQuestion];
	if (!question) {
		await showResults(ctx);
		return;
	}

	const keyboard = question.options.map((option, index) => ({
		text: option,
		callback_data: `answer_${index}`,
	}));

	await ctx.reply(
		`–í–æ–ø—Ä–æ—Å ${ctx.scene.state.currentQuestion + 1} –∏–∑ ${questions.length}:\n\n` +
			question.question,
		{
			reply_markup: {
				inline_keyboard: keyboard.map((option) => [option]),
			},
		}
	);
}

async function showResults(ctx) {
	const score = ctx.scene.state.score;
	const total = questions.length;
	const percentage = Math.round((score / total) * 100);

	await ctx.reply(
		`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n\n` +
			`–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${score} –∏–∑ ${total}\n` +
			`–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${percentage}%\n\n` +
			`${getResultMessage(percentage)}`,
		{
			reply_markup: {
				inline_keyboard: [[{ text: 'üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ', callback_data: 'quiz' }]],
			},
		}
	);

	await ctx.scene.leave();
}

function getResultMessage(percentage) {
	if (percentage === 100) return '–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–Ω–∞–µ—Ç–µ –≤—Å–µ!';
	if (percentage >= 80) return 'üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
	if (percentage >= 60) return 'üòä –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è';
	return 'üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª';
}

quizScene.on('callback_query', async (ctx) => {
	const answer = ctx.callbackQuery.data;
	if (!answer.startsWith('answer_')) return;

	const selectedAnswer = parseInt(answer.split('_')[1]);
	const question = questions[ctx.scene.state.currentQuestion];

	if (selectedAnswer === question.correct) {
		ctx.scene.state.score++;
		await ctx.answerCbQuery('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
	} else {
		await ctx.answerCbQuery('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
	}

	ctx.scene.state.currentQuestion++;
	await showQuestion(ctx);
});

module.exports = quizScene;
