const { Scenes } = require('telegraf');

const languageScene = new Scenes.BaseScene('language');

const languages = {
	ru: {
		name: '–†—É—Å—Å–∫–∏–π',
		flag: 'üá∑üá∫',
		description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫',
	},
	en: {
		name: 'English',
		flag: 'üá¨üáß',
		description: 'Use English language',
	},
};

languageScene.enter(async (ctx) => {
	const currentLang = ctx.session.language || ctx.from.language_code || 'ru';

	await ctx.reply('üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n' + 'Choose interface language:', {
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: `${currentLang === 'ru' ? '‚úÖ' : '‚ö™Ô∏è'} ${languages.ru.flag} –†—É—Å—Å–∫–∏–π`,
						callback_data: 'lang_ru',
					},
				],
				[
					{
						text: `${currentLang === 'en' ? '‚úÖ' : '‚ö™Ô∏è'} ${languages.en.flag} English`,
						callback_data: 'lang_en',
					},
				],
				[{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
			],
		},
	});
});

languageScene.on('callback_query', async (ctx) => {
	const action = ctx.callbackQuery.data;

	try {
		await ctx.answerCbQuery();

		if (action.startsWith('lang_')) {
			const lang = action.split('_')[1];
			ctx.session.language = lang;

			// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			await ctx.deleteMessage();

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
			await ctx.reply(
				`‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${languages[lang].name} ${languages[lang].flag}\n\n` +
					'–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: '‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
						],
					},
				}
			);

			await ctx.scene.leave();
		} else if (action === 'settings') {
			await ctx.scene.leave();
			await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'notifications' }],
						[{ text: 'üåç –Ø–∑—ã–∫', callback_data: 'language' }],
						[{ text: '‚ö°Ô∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', callback_data: 'mode' }],
					],
				},
			});
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
		await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
	}
});

module.exports = languageScene;
